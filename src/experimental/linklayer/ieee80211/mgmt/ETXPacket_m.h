//
// Generated file, do not edit! Created by opp_msgc 4.3 from experimental/linklayer/ieee80211/mgmt/ETXPacket.msg.
//

#ifndef _ETXPACKET_M_H_
#define _ETXPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "MACAddress.h"
// }}



/**
 * Class generated from <tt>experimental/linklayer/ieee80211/mgmt/ETXPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet ETXBasePacket 
 * {
 *      MACAddress source; 
 *      MACAddress dest;   
 * }
 * </pre>
 */
class ETXBasePacket : public ::cPacket
{
  protected:
    MACAddress source_var;
    MACAddress dest_var;

  private:
    void copy(const ETXBasePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ETXBasePacket&);

  public:
    ETXBasePacket(const char *name=NULL, int kind=0);
    ETXBasePacket(const ETXBasePacket& other);
    virtual ~ETXBasePacket();
    ETXBasePacket& operator=(const ETXBasePacket& other);
    virtual ETXBasePacket *dup() const {return new ETXBasePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getSource();
    virtual const MACAddress& getSource() const {return const_cast<ETXBasePacket*>(this)->getSource();}
    virtual void setSource(const MACAddress& source);
    virtual MACAddress& getDest();
    virtual const MACAddress& getDest() const {return const_cast<ETXBasePacket*>(this)->getDest();}
    virtual void setDest(const MACAddress& dest);
};

inline void doPacking(cCommBuffer *b, ETXBasePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ETXBasePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>experimental/linklayer/ieee80211/mgmt/ETXPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MACETXPacket extends ETXBasePacket
 * {
 *      byteLength = 100;
 *      MACAddress neighbors[];
 *      int recPackets[];
 * };
 * </pre>
 */
class MACETXPacket : public ::ETXBasePacket
{
  protected:
    MACAddress *neighbors_var; // array ptr
    unsigned int neighbors_arraysize;
    int *recPackets_var; // array ptr
    unsigned int recPackets_arraysize;

  private:
    void copy(const MACETXPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MACETXPacket&);

  public:
    MACETXPacket(const char *name=NULL, int kind=0);
    MACETXPacket(const MACETXPacket& other);
    virtual ~MACETXPacket();
    MACETXPacket& operator=(const MACETXPacket& other);
    virtual MACETXPacket *dup() const {return new MACETXPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setNeighborsArraySize(unsigned int size);
    virtual unsigned int getNeighborsArraySize() const;
    virtual MACAddress& getNeighbors(unsigned int k);
    virtual const MACAddress& getNeighbors(unsigned int k) const {return const_cast<MACETXPacket*>(this)->getNeighbors(k);}
    virtual void setNeighbors(unsigned int k, const MACAddress& neighbors);
    virtual void setRecPacketsArraySize(unsigned int size);
    virtual unsigned int getRecPacketsArraySize() const;
    virtual int getRecPackets(unsigned int k) const;
    virtual void setRecPackets(unsigned int k, int recPackets);
};

inline void doPacking(cCommBuffer *b, MACETXPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MACETXPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>experimental/linklayer/ieee80211/mgmt/ETXPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MACBwPacket extends ETXBasePacket
 * {
 *      int type;
 *      simtime_t time;
 * };
 * </pre>
 */
class MACBwPacket : public ::ETXBasePacket
{
  protected:
    int type_var;
    simtime_t time_var;

  private:
    void copy(const MACBwPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MACBwPacket&);

  public:
    MACBwPacket(const char *name=NULL, int kind=0);
    MACBwPacket(const MACBwPacket& other);
    virtual ~MACBwPacket();
    MACBwPacket& operator=(const MACBwPacket& other);
    virtual MACBwPacket *dup() const {return new MACBwPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual simtime_t getTime() const;
    virtual void setTime(simtime_t time);
};

inline void doPacking(cCommBuffer *b, MACBwPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MACBwPacket& obj) {obj.parsimUnpack(b);}


#endif // _ETXPACKET_M_H_
