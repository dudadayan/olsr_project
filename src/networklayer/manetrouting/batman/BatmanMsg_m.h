//
// Generated file, do not edit! Created by opp_msgc 4.3 from networklayer/manetrouting/batman/BatmanMsg.msg.
//

#ifndef _BATMANMSG_M_H_
#define _BATMANMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "uint128.h"
#define DIRECTLINK 0x40
#define UNIDIRECTIONAL 0x80



#ifdef __USE_MINHOP__
#define BatPacketSize 17
#else
#define BatPacketSize 16
#endif

class BatmanHnaMsg
{
   public:
    Uint128 addr;
    unsigned char  netmask;
    BatmanHnaMsg& operator=(const BatmanHnaMsg& m)
    {
           addr=m.addr;
           netmask=m.netmask;
           return *this;
    }
	bool operator < (BatmanHnaMsg const &o) const
	{
		if (addr < o.addr)
			return true;
		else if (addr == o.addr)
		{
			if (netmask < o.netmask)
				return true;
			else
				return false;
		}
		else
			return false;	
	}
	
	bool operator > (BatmanHnaMsg const &o) const
	{
		if (addr > o.addr)
			return true;
		else if (addr == o.addr)
		{
			if (netmask > o.netmask)
				return true;
			else
				return false;
		}
		else
			return false;
	}
	bool operator == (BatmanHnaMsg const &o) const
	{
		if (addr == o.addr && netmask == o.netmask)
			return true;
		else
			return false;
	}
	bool operator != (BatmanHnaMsg const &o) const
	{
		if (addr == o.addr && netmask == o.netmask)
			return false;
		else
			return true;
	}
	BatmanHnaMsg * dup()
	{
	    BatmanHnaMsg *aux = new BatmanHnaMsg;
	    *aux=*this;
	    return aux;
	}
};

struct vis_data 
{
	unsigned char type;
	unsigned char data;
	Uint128 ip;
};
// }}



/**
 * Class generated from <tt>networklayer/manetrouting/batman/BatmanMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet BatmanPacket
 * {
 * 	byteLength = BatPacketSize;
 * 	unsigned char  version;  
 * 	unsigned char  flags;    
 * 	unsigned char  ttl;
 * 	unsigned char  gatewayFlags;  
 * 	unsigned short seqNumber;
 * 	unsigned short gatewayPort;
 * 	Uint128        orig;
 * 	Uint128        prevSender;
 * 	unsigned char  tq;           
 * 	unsigned char  hops;
 * 	unsigned char  hnaLen;
 * 	BatmanHnaMsg   hnaMsg[];	
 * }
 * </pre>
 */
class BatmanPacket : public ::cPacket
{
  protected:
    unsigned char version_var;
    unsigned char flags_var;
    unsigned char ttl_var;
    unsigned char gatewayFlags_var;
    unsigned short seqNumber_var;
    unsigned short gatewayPort_var;
    Uint128 orig_var;
    Uint128 prevSender_var;
    unsigned char tq_var;
    unsigned char hops_var;
    unsigned char hnaLen_var;
    BatmanHnaMsg *hnaMsg_var; // array ptr
    unsigned int hnaMsg_arraysize;

  private:
    void copy(const BatmanPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BatmanPacket&);

  public:
    BatmanPacket(const char *name=NULL, int kind=0);
    BatmanPacket(const BatmanPacket& other);
    virtual ~BatmanPacket();
    BatmanPacket& operator=(const BatmanPacket& other);
    virtual BatmanPacket *dup() const {return new BatmanPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned char getVersion() const;
    virtual void setVersion(unsigned char version);
    virtual unsigned char getFlags() const;
    virtual void setFlags(unsigned char flags);
    virtual unsigned char getTtl() const;
    virtual void setTtl(unsigned char ttl);
    virtual unsigned char getGatewayFlags() const;
    virtual void setGatewayFlags(unsigned char gatewayFlags);
    virtual unsigned short getSeqNumber() const;
    virtual void setSeqNumber(unsigned short seqNumber);
    virtual unsigned short getGatewayPort() const;
    virtual void setGatewayPort(unsigned short gatewayPort);
    virtual Uint128& getOrig();
    virtual const Uint128& getOrig() const {return const_cast<BatmanPacket*>(this)->getOrig();}
    virtual void setOrig(const Uint128& orig);
    virtual Uint128& getPrevSender();
    virtual const Uint128& getPrevSender() const {return const_cast<BatmanPacket*>(this)->getPrevSender();}
    virtual void setPrevSender(const Uint128& prevSender);
    virtual unsigned char getTq() const;
    virtual void setTq(unsigned char tq);
    virtual unsigned char getHops() const;
    virtual void setHops(unsigned char hops);
    virtual unsigned char getHnaLen() const;
    virtual void setHnaLen(unsigned char hnaLen);
    virtual void setHnaMsgArraySize(unsigned int size);
    virtual unsigned int getHnaMsgArraySize() const;
    virtual BatmanHnaMsg& getHnaMsg(unsigned int k);
    virtual const BatmanHnaMsg& getHnaMsg(unsigned int k) const {return const_cast<BatmanPacket*>(this)->getHnaMsg(k);}
    virtual void setHnaMsg(unsigned int k, const BatmanHnaMsg& hnaMsg);
};

inline void doPacking(cCommBuffer *b, BatmanPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BatmanPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/manetrouting/batman/BatmanMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet visPacket {
 * 	Uint128 senderIp;
 * 	unsigned char version;
 * 	unsigned char gwClass;
 * 	unsigned char tqMax;
 * 	vis_data visData[];
 * }
 * </pre>
 */
class visPacket : public ::cPacket
{
  protected:
    Uint128 senderIp_var;
    unsigned char version_var;
    unsigned char gwClass_var;
    unsigned char tqMax_var;
    vis_data *visData_var; // array ptr
    unsigned int visData_arraysize;

  private:
    void copy(const visPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const visPacket&);

  public:
    visPacket(const char *name=NULL, int kind=0);
    visPacket(const visPacket& other);
    virtual ~visPacket();
    visPacket& operator=(const visPacket& other);
    virtual visPacket *dup() const {return new visPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual Uint128& getSenderIp();
    virtual const Uint128& getSenderIp() const {return const_cast<visPacket*>(this)->getSenderIp();}
    virtual void setSenderIp(const Uint128& senderIp);
    virtual unsigned char getVersion() const;
    virtual void setVersion(unsigned char version);
    virtual unsigned char getGwClass() const;
    virtual void setGwClass(unsigned char gwClass);
    virtual unsigned char getTqMax() const;
    virtual void setTqMax(unsigned char tqMax);
    virtual void setVisDataArraySize(unsigned int size);
    virtual unsigned int getVisDataArraySize() const;
    virtual vis_data& getVisData(unsigned int k);
    virtual const vis_data& getVisData(unsigned int k) const {return const_cast<visPacket*>(this)->getVisData(k);}
    virtual void setVisData(unsigned int k, const vis_data& visData);
};

inline void doPacking(cCommBuffer *b, visPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, visPacket& obj) {obj.parsimUnpack(b);}


#endif // _BATMANMSG_M_H_
