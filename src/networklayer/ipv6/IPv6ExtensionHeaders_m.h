//
// Generated file, do not edit! Created by opp_msgc 4.3 from networklayer/ipv6/IPv6ExtensionHeaders.msg.
//

#ifndef _IPV6EXTENSIONHEADERS_M_H_
#define _IPV6EXTENSIONHEADERS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPv6Address.h"
#include "IPv6Datagram.h"
// }}



/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg</tt> by opp_msgc.
 * <pre>
 * class IPv6HopByHopOptionsHeader extends IPv6ExtensionHeader
 * {
 * }
 * </pre>
 */
class IPv6HopByHopOptionsHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6HopByHopOptionsHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6HopByHopOptionsHeader&);

  public:
    IPv6HopByHopOptionsHeader();
    IPv6HopByHopOptionsHeader(const IPv6HopByHopOptionsHeader& other);
    virtual ~IPv6HopByHopOptionsHeader();
    IPv6HopByHopOptionsHeader& operator=(const IPv6HopByHopOptionsHeader& other);
    virtual IPv6HopByHopOptionsHeader *dup() const {return new IPv6HopByHopOptionsHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6HopByHopOptionsHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6HopByHopOptionsHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg</tt> by opp_msgc.
 * <pre>
 * class IPv6RoutingHeader extends IPv6ExtensionHeader
 * {
 *     unsigned char routingType;
 *     unsigned char segmentsLeft;
 *     IPv6Address address[];
 * }
 * </pre>
 */
class IPv6RoutingHeader : public ::IPv6ExtensionHeader
{
  protected:
    unsigned char routingType_var;
    unsigned char segmentsLeft_var;
    IPv6Address *address_var; // array ptr
    unsigned int address_arraysize;

  private:
    void copy(const IPv6RoutingHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6RoutingHeader&);

  public:
    IPv6RoutingHeader();
    IPv6RoutingHeader(const IPv6RoutingHeader& other);
    virtual ~IPv6RoutingHeader();
    IPv6RoutingHeader& operator=(const IPv6RoutingHeader& other);
    virtual IPv6RoutingHeader *dup() const {return new IPv6RoutingHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned char getRoutingType() const;
    virtual void setRoutingType(unsigned char routingType);
    virtual unsigned char getSegmentsLeft() const;
    virtual void setSegmentsLeft(unsigned char segmentsLeft);
    virtual void setAddressArraySize(unsigned int size);
    virtual unsigned int getAddressArraySize() const;
    virtual IPv6Address& getAddress(unsigned int k);
    virtual const IPv6Address& getAddress(unsigned int k) const {return const_cast<IPv6RoutingHeader*>(this)->getAddress(k);}
    virtual void setAddress(unsigned int k, const IPv6Address& address);
};

inline void doPacking(cCommBuffer *b, IPv6RoutingHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6RoutingHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg</tt> by opp_msgc.
 * <pre>
 * class IPv6FragmentHeader extends IPv6ExtensionHeader
 * {
 *     unsigned short fragmentOffset;
 *     unsigned int identification;  
 *     bool moreFragments; 
 * }
 * </pre>
 */
class IPv6FragmentHeader : public ::IPv6ExtensionHeader
{
  protected:
    unsigned short fragmentOffset_var;
    unsigned int identification_var;
    bool moreFragments_var;

  private:
    void copy(const IPv6FragmentHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6FragmentHeader&);

  public:
    IPv6FragmentHeader();
    IPv6FragmentHeader(const IPv6FragmentHeader& other);
    virtual ~IPv6FragmentHeader();
    IPv6FragmentHeader& operator=(const IPv6FragmentHeader& other);
    virtual IPv6FragmentHeader *dup() const {return new IPv6FragmentHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getFragmentOffset() const;
    virtual void setFragmentOffset(unsigned short fragmentOffset);
    virtual unsigned int getIdentification() const;
    virtual void setIdentification(unsigned int identification);
    virtual bool getMoreFragments() const;
    virtual void setMoreFragments(bool moreFragments);
};

inline void doPacking(cCommBuffer *b, IPv6FragmentHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6FragmentHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg</tt> by opp_msgc.
 * <pre>
 * class IPv6DestinationOptionsHeader extends IPv6ExtensionHeader
 * {
 * }
 * </pre>
 */
class IPv6DestinationOptionsHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6DestinationOptionsHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6DestinationOptionsHeader&);

  public:
    IPv6DestinationOptionsHeader();
    IPv6DestinationOptionsHeader(const IPv6DestinationOptionsHeader& other);
    virtual ~IPv6DestinationOptionsHeader();
    IPv6DestinationOptionsHeader& operator=(const IPv6DestinationOptionsHeader& other);
    virtual IPv6DestinationOptionsHeader *dup() const {return new IPv6DestinationOptionsHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6DestinationOptionsHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6DestinationOptionsHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg</tt> by opp_msgc.
 * <pre>
 * class IPv6AuthenticationHeader extends IPv6ExtensionHeader
 * {
 * }
 * </pre>
 */
class IPv6AuthenticationHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6AuthenticationHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6AuthenticationHeader&);

  public:
    IPv6AuthenticationHeader();
    IPv6AuthenticationHeader(const IPv6AuthenticationHeader& other);
    virtual ~IPv6AuthenticationHeader();
    IPv6AuthenticationHeader& operator=(const IPv6AuthenticationHeader& other);
    virtual IPv6AuthenticationHeader *dup() const {return new IPv6AuthenticationHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6AuthenticationHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6AuthenticationHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg</tt> by opp_msgc.
 * <pre>
 * class IPv6EncapsulatingSecurityPayloadHeader extends IPv6ExtensionHeader
 * {
 * }
 * </pre>
 */
class IPv6EncapsulatingSecurityPayloadHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6EncapsulatingSecurityPayloadHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6EncapsulatingSecurityPayloadHeader&);

  public:
    IPv6EncapsulatingSecurityPayloadHeader();
    IPv6EncapsulatingSecurityPayloadHeader(const IPv6EncapsulatingSecurityPayloadHeader& other);
    virtual ~IPv6EncapsulatingSecurityPayloadHeader();
    IPv6EncapsulatingSecurityPayloadHeader& operator=(const IPv6EncapsulatingSecurityPayloadHeader& other);
    virtual IPv6EncapsulatingSecurityPayloadHeader *dup() const {return new IPv6EncapsulatingSecurityPayloadHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader& obj) {obj.parsimUnpack(b);}


#endif // _IPV6EXTENSIONHEADERS_M_H_
