//
// Generated file, do not edit! Created by opp_msgc 4.3 from applications/dhcp/DHCP.msg.
//

#ifndef _DHCP_M_H_
#define _DHCP_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "MACAddress.h"
#include "IPAddress.h"
#include "DHCPOptions.h"
// }}



/**
 * Enum generated from <tt>applications/dhcp/DHCP.msg</tt> by opp_msgc.
 * <pre>
 * enum DHCP_OPCODE
 * {
 *     BOOTREQUEST = 1;
 *     BOOTREPLY = 2;
 * }
 * </pre>
 */
enum DHCP_OPCODE {
    BOOTREQUEST = 1,
    BOOTREPLY = 2
};

/**
 * Enum generated from <tt>applications/dhcp/DHCP.msg</tt> by opp_msgc.
 * <pre>
 * enum DHCP_TYPE
 * {
 *     DHCPDISCOVER = 1;
 *     DHCPOFFER = 2;
 *     DHCPREQUEST = 3;
 *     DHCPDECLINE = 4;
 *     DHCPACK = 5;
 *     DHCPNAK = 6;
 *     DHCPRELEASE = 7;
 *     DHCPINFORM = 8;
 *     DHCPFORCERENEW = 9;
 *     DHCPLEASEQUERY = 10;
 *     DHCPLEASEUNASSIGNED = 11;
 *     DHCPLEASEUNKNOWN = 12;
 *     DHCPLEASEACTIVE = 13;
 * }
 * </pre>
 */
enum DHCP_TYPE {
    DHCPDISCOVER = 1,
    DHCPOFFER = 2,
    DHCPREQUEST = 3,
    DHCPDECLINE = 4,
    DHCPACK = 5,
    DHCPNAK = 6,
    DHCPRELEASE = 7,
    DHCPINFORM = 8,
    DHCPFORCERENEW = 9,
    DHCPLEASEQUERY = 10,
    DHCPLEASEUNASSIGNED = 11,
    DHCPLEASEUNKNOWN = 12,
    DHCPLEASEACTIVE = 13
};

/**
 * Class generated from <tt>applications/dhcp/DHCP.msg</tt> by opp_msgc.
 * <pre>
 * packet DHCPMessage
 * {
 *     int op;
 *     int htype;
 *     int hlen;
 *     int hops;
 *     long xid;
 *     int secs;
 *     long flags;
 *     IPAddress ciaddr;
 *     IPAddress yiaddr;
 *     IPAddress giaddr;
 *     MACAddress chaddr;
 *     string sname;
 *     string file;
 *     DHCPOption options;
 * }
 * </pre>
 */
class DHCPMessage : public ::cPacket
{
  protected:
    int op_var;
    int htype_var;
    int hlen_var;
    int hops_var;
    long xid_var;
    int secs_var;
    long flags_var;
    IPAddress ciaddr_var;
    IPAddress yiaddr_var;
    IPAddress giaddr_var;
    MACAddress chaddr_var;
    opp_string sname_var;
    opp_string file_var;
    DHCPOption options_var;

  private:
    void copy(const DHCPMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DHCPMessage&);

  public:
    DHCPMessage(const char *name=NULL, int kind=0);
    DHCPMessage(const DHCPMessage& other);
    virtual ~DHCPMessage();
    DHCPMessage& operator=(const DHCPMessage& other);
    virtual DHCPMessage *dup() const {return new DHCPMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getOp() const;
    virtual void setOp(int op);
    virtual int getHtype() const;
    virtual void setHtype(int htype);
    virtual int getHlen() const;
    virtual void setHlen(int hlen);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual long getXid() const;
    virtual void setXid(long xid);
    virtual int getSecs() const;
    virtual void setSecs(int secs);
    virtual long getFlags() const;
    virtual void setFlags(long flags);
    virtual IPAddress& getCiaddr();
    virtual const IPAddress& getCiaddr() const {return const_cast<DHCPMessage*>(this)->getCiaddr();}
    virtual void setCiaddr(const IPAddress& ciaddr);
    virtual IPAddress& getYiaddr();
    virtual const IPAddress& getYiaddr() const {return const_cast<DHCPMessage*>(this)->getYiaddr();}
    virtual void setYiaddr(const IPAddress& yiaddr);
    virtual IPAddress& getGiaddr();
    virtual const IPAddress& getGiaddr() const {return const_cast<DHCPMessage*>(this)->getGiaddr();}
    virtual void setGiaddr(const IPAddress& giaddr);
    virtual MACAddress& getChaddr();
    virtual const MACAddress& getChaddr() const {return const_cast<DHCPMessage*>(this)->getChaddr();}
    virtual void setChaddr(const MACAddress& chaddr);
    virtual const char * getSname() const;
    virtual void setSname(const char * sname);
    virtual const char * getFile() const;
    virtual void setFile(const char * file);
    virtual DHCPOption& getOptions();
    virtual const DHCPOption& getOptions() const {return const_cast<DHCPMessage*>(this)->getOptions();}
    virtual void setOptions(const DHCPOption& options);
};

inline void doPacking(cCommBuffer *b, DHCPMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DHCPMessage& obj) {obj.parsimUnpack(b);}


#endif // _DHCP_M_H_
