//
// Generated file, do not edit! Created by opp_msgc 4.3 from transport/contract/TCPCommand.msg.
//

#ifndef _TCPCOMMAND_M_H_
#define _TCPCOMMAND_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPvXAddress.h"
// }}



/**
 * Enum generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * enum TcpCommandCode
 * {
 * 
 *     TCP_C_OPEN_ACTIVE = 1;   
 *     TCP_C_OPEN_PASSIVE = 2;  
 *     TCP_C_SEND = 3;          
 *     TCP_C_CLOSE = 5;         
 *     TCP_C_ABORT = 6;         
 *     TCP_C_STATUS = 7;        
 * }
 * </pre>
 */
enum TcpCommandCode {
    TCP_C_OPEN_ACTIVE = 1,
    TCP_C_OPEN_PASSIVE = 2,
    TCP_C_SEND = 3,
    TCP_C_CLOSE = 5,
    TCP_C_ABORT = 6,
    TCP_C_STATUS = 7
};

/**
 * Enum generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * enum TcpStatusInd
 * {
 * 
 *     TCP_I_DATA = 1;              
 *     TCP_I_URGENT_DATA = 2;       
 *     TCP_I_ESTABLISHED = 3;       
 *     TCP_I_PEER_CLOSED = 4;       
 *     TCP_I_CLOSED = 5;            
 *     TCP_I_CONNECTION_REFUSED = 6; 
 *     TCP_I_CONNECTION_RESET = 7;  
 *     TCP_I_TIMED_OUT = 8;         
 *     TCP_I_STATUS = 9;            
 * }
 * </pre>
 */
enum TcpStatusInd {
    TCP_I_DATA = 1,
    TCP_I_URGENT_DATA = 2,
    TCP_I_ESTABLISHED = 3,
    TCP_I_PEER_CLOSED = 4,
    TCP_I_CLOSED = 5,
    TCP_I_CONNECTION_REFUSED = 6,
    TCP_I_CONNECTION_RESET = 7,
    TCP_I_TIMED_OUT = 8,
    TCP_I_STATUS = 9
};

/**
 * Enum generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * enum TCPErrorCode
 * {
 * 
 * }
 * </pre>
 */
enum TCPErrorCode {
};

/**
 * Class generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * class TCPCommand
 * {
 *     int connId = -1;   
 *     int userId = -1;   
 * }
 * </pre>
 */
class TCPCommand : public ::cObject
{
  protected:
    int connId_var;
    int userId_var;

  private:
    void copy(const TCPCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TCPCommand&);

  public:
    TCPCommand();
    TCPCommand(const TCPCommand& other);
    virtual ~TCPCommand();
    TCPCommand& operator=(const TCPCommand& other);
    virtual TCPCommand *dup() const {return new TCPCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getConnId() const;
    virtual void setConnId(int connId);
    virtual int getUserId() const;
    virtual void setUserId(int userId);
};

inline void doPacking(cCommBuffer *b, TCPCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TCPCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * class TCPErrorInfo extends TCPCommand
 * {
 *     int errorCode enum(TCPErrorCode);
 *     string messageText;
 * }
 * </pre>
 */
class TCPErrorInfo : public ::TCPCommand
{
  protected:
    int errorCode_var;
    opp_string messageText_var;

  private:
    void copy(const TCPErrorInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TCPErrorInfo&);

  public:
    TCPErrorInfo();
    TCPErrorInfo(const TCPErrorInfo& other);
    virtual ~TCPErrorInfo();
    TCPErrorInfo& operator=(const TCPErrorInfo& other);
    virtual TCPErrorInfo *dup() const {return new TCPErrorInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getErrorCode() const;
    virtual void setErrorCode(int errorCode);
    virtual const char * getMessageText() const;
    virtual void setMessageText(const char * messageText);
};

inline void doPacking(cCommBuffer *b, TCPErrorInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TCPErrorInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * class TCPOpenCommand extends TCPCommand
 * {
 *     IPvXAddress localAddr; 
 *     IPvXAddress remoteAddr;
 *     int localPort = -1;       
 *     int remotePort = -1;      
 *     bool fork = false;        
 *     string sendQueueClass;    
 *     string receiveQueueClass; 
 *     string tcpAlgorithmClass; 
 * }
 * </pre>
 */
class TCPOpenCommand : public ::TCPCommand
{
  protected:
    IPvXAddress localAddr_var;
    IPvXAddress remoteAddr_var;
    int localPort_var;
    int remotePort_var;
    bool fork_var;
    opp_string sendQueueClass_var;
    opp_string receiveQueueClass_var;
    opp_string tcpAlgorithmClass_var;

  private:
    void copy(const TCPOpenCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TCPOpenCommand&);

  public:
    TCPOpenCommand();
    TCPOpenCommand(const TCPOpenCommand& other);
    virtual ~TCPOpenCommand();
    TCPOpenCommand& operator=(const TCPOpenCommand& other);
    virtual TCPOpenCommand *dup() const {return new TCPOpenCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getLocalAddr();
    virtual const IPvXAddress& getLocalAddr() const {return const_cast<TCPOpenCommand*>(this)->getLocalAddr();}
    virtual void setLocalAddr(const IPvXAddress& localAddr);
    virtual IPvXAddress& getRemoteAddr();
    virtual const IPvXAddress& getRemoteAddr() const {return const_cast<TCPOpenCommand*>(this)->getRemoteAddr();}
    virtual void setRemoteAddr(const IPvXAddress& remoteAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
    virtual bool getFork() const;
    virtual void setFork(bool fork);
    virtual const char * getSendQueueClass() const;
    virtual void setSendQueueClass(const char * sendQueueClass);
    virtual const char * getReceiveQueueClass() const;
    virtual void setReceiveQueueClass(const char * receiveQueueClass);
    virtual const char * getTcpAlgorithmClass() const;
    virtual void setTcpAlgorithmClass(const char * tcpAlgorithmClass);
};

inline void doPacking(cCommBuffer *b, TCPOpenCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TCPOpenCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * class TCPSendCommand extends TCPCommand
 * {
 * }
 * </pre>
 */
class TCPSendCommand : public ::TCPCommand
{
  protected:

  private:
    void copy(const TCPSendCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TCPSendCommand&);

  public:
    TCPSendCommand();
    TCPSendCommand(const TCPSendCommand& other);
    virtual ~TCPSendCommand();
    TCPSendCommand& operator=(const TCPSendCommand& other);
    virtual TCPSendCommand *dup() const {return new TCPSendCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, TCPSendCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TCPSendCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * class TCPConnectInfo extends TCPCommand
 * {
 *     IPvXAddress localAddr;
 *     IPvXAddress remoteAddr;
 *     int localPort;
 *     int remotePort;
 * }
 * </pre>
 */
class TCPConnectInfo : public ::TCPCommand
{
  protected:
    IPvXAddress localAddr_var;
    IPvXAddress remoteAddr_var;
    int localPort_var;
    int remotePort_var;

  private:
    void copy(const TCPConnectInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TCPConnectInfo&);

  public:
    TCPConnectInfo();
    TCPConnectInfo(const TCPConnectInfo& other);
    virtual ~TCPConnectInfo();
    TCPConnectInfo& operator=(const TCPConnectInfo& other);
    virtual TCPConnectInfo *dup() const {return new TCPConnectInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getLocalAddr();
    virtual const IPvXAddress& getLocalAddr() const {return const_cast<TCPConnectInfo*>(this)->getLocalAddr();}
    virtual void setLocalAddr(const IPvXAddress& localAddr);
    virtual IPvXAddress& getRemoteAddr();
    virtual const IPvXAddress& getRemoteAddr() const {return const_cast<TCPConnectInfo*>(this)->getRemoteAddr();}
    virtual void setRemoteAddr(const IPvXAddress& remoteAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
};

inline void doPacking(cCommBuffer *b, TCPConnectInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TCPConnectInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/TCPCommand.msg</tt> by opp_msgc.
 * <pre>
 * class TCPStatusInfo extends TCPCommand
 * {
 *     int state;
 *     string stateName;
 * 
 *     IPvXAddress localAddr;
 *     IPvXAddress remoteAddr;
 *     int localPort;
 *     int remotePort;
 * 
 *     unsigned int snd_mss;
 * 
 *     unsigned int snd_una;
 *     unsigned int snd_nxt;
 *     unsigned int snd_max;
 *     unsigned int snd_wnd;
 *     unsigned int snd_up;
 *     unsigned int snd_wl1;
 *     unsigned int snd_wl2;
 *     unsigned int iss;
 * 
 *     unsigned int rcv_nxt;
 *     unsigned int rcv_wnd;
 *     unsigned int rcv_up;
 *     unsigned int irs;
 * 
 *     bool fin_ack_rcvd;
 * }
 * </pre>
 */
class TCPStatusInfo : public ::TCPCommand
{
  protected:
    int state_var;
    opp_string stateName_var;
    IPvXAddress localAddr_var;
    IPvXAddress remoteAddr_var;
    int localPort_var;
    int remotePort_var;
    unsigned int snd_mss_var;
    unsigned int snd_una_var;
    unsigned int snd_nxt_var;
    unsigned int snd_max_var;
    unsigned int snd_wnd_var;
    unsigned int snd_up_var;
    unsigned int snd_wl1_var;
    unsigned int snd_wl2_var;
    unsigned int iss_var;
    unsigned int rcv_nxt_var;
    unsigned int rcv_wnd_var;
    unsigned int rcv_up_var;
    unsigned int irs_var;
    bool fin_ack_rcvd_var;

  private:
    void copy(const TCPStatusInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TCPStatusInfo&);

  public:
    TCPStatusInfo();
    TCPStatusInfo(const TCPStatusInfo& other);
    virtual ~TCPStatusInfo();
    TCPStatusInfo& operator=(const TCPStatusInfo& other);
    virtual TCPStatusInfo *dup() const {return new TCPStatusInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getState() const;
    virtual void setState(int state);
    virtual const char * getStateName() const;
    virtual void setStateName(const char * stateName);
    virtual IPvXAddress& getLocalAddr();
    virtual const IPvXAddress& getLocalAddr() const {return const_cast<TCPStatusInfo*>(this)->getLocalAddr();}
    virtual void setLocalAddr(const IPvXAddress& localAddr);
    virtual IPvXAddress& getRemoteAddr();
    virtual const IPvXAddress& getRemoteAddr() const {return const_cast<TCPStatusInfo*>(this)->getRemoteAddr();}
    virtual void setRemoteAddr(const IPvXAddress& remoteAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
    virtual unsigned int getSnd_mss() const;
    virtual void setSnd_mss(unsigned int snd_mss);
    virtual unsigned int getSnd_una() const;
    virtual void setSnd_una(unsigned int snd_una);
    virtual unsigned int getSnd_nxt() const;
    virtual void setSnd_nxt(unsigned int snd_nxt);
    virtual unsigned int getSnd_max() const;
    virtual void setSnd_max(unsigned int snd_max);
    virtual unsigned int getSnd_wnd() const;
    virtual void setSnd_wnd(unsigned int snd_wnd);
    virtual unsigned int getSnd_up() const;
    virtual void setSnd_up(unsigned int snd_up);
    virtual unsigned int getSnd_wl1() const;
    virtual void setSnd_wl1(unsigned int snd_wl1);
    virtual unsigned int getSnd_wl2() const;
    virtual void setSnd_wl2(unsigned int snd_wl2);
    virtual unsigned int getIss() const;
    virtual void setIss(unsigned int iss);
    virtual unsigned int getRcv_nxt() const;
    virtual void setRcv_nxt(unsigned int rcv_nxt);
    virtual unsigned int getRcv_wnd() const;
    virtual void setRcv_wnd(unsigned int rcv_wnd);
    virtual unsigned int getRcv_up() const;
    virtual void setRcv_up(unsigned int rcv_up);
    virtual unsigned int getIrs() const;
    virtual void setIrs(unsigned int irs);
    virtual bool getFin_ack_rcvd() const;
    virtual void setFin_ack_rcvd(bool fin_ack_rcvd);
};

inline void doPacking(cCommBuffer *b, TCPStatusInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TCPStatusInfo& obj) {obj.parsimUnpack(b);}


#endif // _TCPCOMMAND_M_H_
